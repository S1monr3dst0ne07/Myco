# Core Performance Benchmark Suite
# Tests critical operations that must maintain high performance

use test as test_framework;

print("Core Performance Benchmark Suite Starting...");

# Critical Performance Test 1: Loop Execution
test_framework.start_benchmark("Loop iteration (1M)");
let sum = 0;
for i in 1..1000000:
    sum = sum + i;
end
let loop_time = test_framework.end_benchmark();
print("Loop iteration (1M): ", loop_time, " microseconds, Final sum: ", sum);

# Critical Performance Test 2: String Operations
test_framework.start_benchmark("String concatenation (10K)");
let str_result = "";
for i in 1..10000:
    str_result = str_result + str(i);
end
let string_time = test_framework.end_benchmark();
print("String concatenation (10K): ", string_time, " microseconds, String length: ", len(str_result));

# Critical Performance Test 3: Array Operations
test_framework.start_benchmark("Array creation (100K)");
let arr = [];
for i in 1..100000:
    push(arr, i);
end
let array_time = test_framework.end_benchmark();
print("Array creation (100K): ", array_time, " microseconds, Array length: ", len(arr));

# Critical Performance Test 4: Math Operations
test_framework.start_benchmark("Math operations (100K)");
let result = 0;
for i in 1..100000:
    result = result + (i * i) / 2;
end
let math_time = test_framework.end_benchmark();
print("Math operations (100K): ", math_time, " microseconds, Final result: ", result);

# Critical Performance Test 5: Function Calls
let test_func = x => x * x;
test_framework.start_benchmark("Function calls (100K)");
for i in 1..100000:
    result = test_func(i);
end
let func_time = test_framework.end_benchmark();
print("Function calls (100K): ", func_time, " microseconds");

print("\nCore Performance Results: ");
print("========================");
print("Loop iteration (1M): ", loop_time, " microseconds");
print("String concatenation (10K): ", string_time, " microseconds");
print("Array operations (100K): ", array_time, " microseconds");
print("Math operations (100K): ", math_time, " microseconds");
print("Function calls (100K): ", func_time, " microseconds");

let total_time = loop_time + string_time + array_time + math_time + func_time;
print("Total benchmark time: ", total_time, " microseconds");
print("Total benchmark time: ", total_time / 1000, "milliseconds");

# Performance validation
let loop_ok = loop_time < 5000;  # <5ms target
let string_ok = string_time < 2000;  # <2ms target
let array_ok = array_time < 5000;  # <5ms target
let math_ok = math_time < 5000;  # <5ms target
let func_ok = func_time < 5000;  # <5ms target

print("\nPerformance Validation: ");
print("======================");
print("Loop performance: ", loop_ok ? "PASS" : "FAIL");
print("String performance: ", string_ok ? "PASS" : "FAIL");
print("Array performance: ", array_ok ? "PASS" : "FAIL");
print("Math performance: ", math_ok ? "PASS" : "FAIL");
print("Function performance: ", func_ok ? "PASS" : "FAIL");

let all_passed = loop_ok and string_ok and array_ok and math_ok and func_ok;
print("Overall performance: ", all_passed ? "PASS" : "FAIL");
